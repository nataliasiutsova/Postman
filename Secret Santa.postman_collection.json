{
	"info": {
		"_postman_id": "04140446-af54-4a3d-bc32-c7fea0b330e4",
		"name": "Secret Santa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18748566"
	},
	"item": [
		{
			"name": "Test as a user I can not login to the system with invalid password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\", \r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can not login to the system with invalid email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"USER_NOT_FOUND\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{$randomEmail}}\", \r\n    \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can successfully login to the system",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const oldUserPassword=pm.variables.replaceIn(\"{{userPassword}}\");\r",
							"pm.environment.set(\"oldUserPassword\",oldUserPassword)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check user name and email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"Tester\");\r",
							"    pm.expect(jsonData.email).to.eql(\"test-email2023@mail.ru\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can change my password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const userPassword=pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
							"pm.environment.set(\"userPassword\",userPassword)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check user id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(3001236);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}account/password",
					"host": [
						"{{Base URL}}account"
					],
					"path": [
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can successfully logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}logout",
					"host": [
						"{{Base URL}}logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can not login to the system with old password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"INVALID_USERNAME_OR_PASSWORD\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\":\"{{oldUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can login to the system with new password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check user id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(3001236);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as an authorized user I can create a box",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const boxName=pm.variables.replaceIn(\"{{$randomWord}}\");\r",
							"pm.environment.set(\"boxName\",boxName)\r",
							"\r",
							"const boxKey=pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
							"pm.environment.set(\"boxKey\",boxKey)\r",
							"\r",
							"const picture=[\r",
							"    \"tree\",\r",
							"    \"gift\",\r",
							"    \"cup_one\",\r",
							"    \"cup_two\",\r",
							"    \"cake\",\r",
							"    \"cup_cake\",\r",
							"    \"cookie_tree\",\r",
							"    \"cookie_star\",\r",
							"    \"lollipop\",\r",
							"    \"mittens\",\r",
							"    \"tree_toys\",\r",
							"    \"santa\",\r",
							"    \"house_one\"\r",
							"]\r",
							"const randomNumber=Math.floor(Math.random()*picture.length);\r",
							"pm.environment.set(\"picture\",picture[randomNumber]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"const boxname=pm.environment.get(\"boxName\");\r",
							"\r",
							"pm.test(\"Check name of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.name).to.eql(boxname);\r",
							"});\r",
							"\r",
							"const boxkey=pm.environment.get(\"boxKey\");\r",
							"\r",
							"pm.test(\"Check key of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.key).to.eql(boxkey);\r",
							"});\r",
							"\r",
							"const pictures=pm.environment.get(\"picture\");\r",
							"\r",
							"pm.test(\"Check picture of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.picture).to.eql(pictures);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{boxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{picture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,  \r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test check the user box",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check admin\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].admin.email).to.eql(\"test-email2023@mail.ru\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}account/boxes",
					"host": [
						"{{Base URL}}account"
					],
					"path": [
						"boxes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as an authorized user I can not create a box with key that already exist",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"BOX_KEY_ALREADY_EXIST\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{$randomWord}}\",\r\n\"key\":\"santa\",\r\n\"picture\":\"{{picture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,\r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can change the name of the box",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const newBoxName=pm.variables.replaceIn(\"{{$randomWord}}\");\r",
							"pm.environment.set(\"newBoxName\",newBoxName)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const newname = pm.environment.get(\"newBoxName\");\r",
							"\r",
							"pm.test(\"Check new name of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.name).to.eql(newname);\r",
							"});\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{newBoxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{picture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,  \r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can change the picture of the box wrapper",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const picture=[\r",
							"    \"tree\",\r",
							"    \"gift\",\r",
							"    \"cup_one\",\r",
							"    \"cup_two\",\r",
							"    \"cake\",\r",
							"    \"cup_cake\",\r",
							"    \"cookie_tree\",\r",
							"    \"cookie_star\",\r",
							"    \"lollipop\",\r",
							"    \"mittens\",\r",
							"    \"tree_toys\",\r",
							"    \"santa\",\r",
							"    \"house_one\"\r",
							"]\r",
							"const randomNumber=Math.floor(Math.random()*picture.length);\r",
							"pm.environment.set(\"newPicture\",picture[randomNumber]);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const newpicture = pm.environment.get(\"newPicture\");\r",
							"\r",
							"pm.test(\"Check new picture of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.picture).to.eql(newpicture);\r",
							"});\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{newBoxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{newPicture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,  \r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can limit the price of presents",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currency=[\r",
							"    \"rub\",\r",
							"    \"eur\",\r",
							"    \"uah\",\r",
							"    \"byn\",\r",
							"    \"kzt\",\r",
							"    \"usd\"\r",
							"]\r",
							"const randomNumber=Math.floor(Math.random()*currency.length);\r",
							"pm.environment.set(\"currency\",currency[randomNumber]);\r",
							"\r",
							"pm.environment.set(\"cashLimit\",Math.trunc(Math.random()*100000)+1);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const cashlimit = pm.environment.get(\"cashLimit\");\r",
							"\r",
							"pm.test(\"Check cash limit\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.cashLimit).to.eql(cashlimit);\r",
							"});\r",
							"\r",
							"const cashCurrency = pm.environment.get(\"currency\");\r",
							"\r",
							"pm.test(\"Check cash currency\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.cashLimitCurrency).to.eql(cashCurrency);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{newBoxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{newPicture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":true,  \r\n\"cashLimit\":{{cashLimit}},\r\n\"cashLimitCurrency\":\"{{currency}}\",\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can delete the box",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box/{{boxKey}}",
					"host": [
						"{{Base URL}}box"
					],
					"path": [
						"{{boxKey}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test check the user boxes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"[]\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}account/boxes",
					"host": [
						"{{Base URL}}account"
					],
					"path": [
						"boxes"
					]
				}
			},
			"response": []
		}
	]
}