{
	"info": {
		"_postman_id": "aa0cd3e0-4ba6-4a66-81f4-65a0fa837825",
		"name": "Secret Santa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "18748566-aa0cd3e0-4ba6-4a66-81f4-65a0fa837825"
	},
	"item": [
		{
			"name": "Test as a user I can not login to the system with invalid password",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "778d5575-6cff-4b7e-9663-c6b262fcd86c",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "83914dac-4ea3-4c20-9ca0-b7906fdeb1da",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can not login to the system with invalid email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e26e356b-a241-4c0e-8984-9fcf6b1c9811",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"USER_NOT_FOUND\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c9cc4119-ef2e-460c-b53e-35f10e76c0f4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "4bcbb6f1-a40d-45d3-b0a5-c8441464e4bc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test-email@mail.ru\", \r\n    \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can successfully login to the system",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9563aecb-d1ca-4522-9a23-33fe170f9a70",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5f3ae4b7-9fbd-4656-bb5a-6b9b1bd5178f",
						"exec": [
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check user name and email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"Tester\");\r",
							"    pm.expect(jsonData.email).to.eql(\"test-email2023@mail.ru\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0ca17b81-ad0d-4e6b-86b7-6d0e1c7a415f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can change my password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cae79f6d-be79-4d8c-aba5-4ac9c37755c4",
						"exec": [
							"const oldUserPassword=pm.variables.replaceIn(\"{{userPassword}}\");\r",
							"pm.environment.set(\"oldUserPassword\",oldUserPassword)\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "430d9cbf-a7e7-4287-a4e7-b4fb46a9a3bf",
						"exec": [
							"\r",
							"const request1 = JSON.parse(request.data);\r",
							"\r",
							"\r",
							"if (request1.password.length>=6 && request1.password.length<=20 ){\r",
							"    pm.environment.set(\"userPassword\",request1.password)\r",
							"   \r",
							"};\r",
							"\r",
							"if (request1.password.length>=6 && request1.password.length<=20){  \r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"\r",
							"    });\r",
							"\r",
							"    pm.test(\"Check user's data\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.email).to.eql(\"test-email2023@mail.ru\");\r",
							"        pm.expect(jsonData.isVerified).to.eql(true) });\r",
							"\r",
							"} else {\r",
							"    \r",
							"    pm.test(\"Status code is 400\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"\r",
							"     pm.test(\"Check error message\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.error.message).to.eql(\"validations.invalid\");\r",
							"    });\r",
							"\r",
							"    \r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "b829b553-7b84-4757-a885-8303cbbc1871",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{newUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}account/password",
					"host": [
						"{{Base URL}}account"
					],
					"path": [
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can successfully logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e9018c2-fd5c-40e7-8a37-c4d259abffaa",
						"exec": [
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "4d8ee1de-9a70-4e71-ba8e-116d96a2d861",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}logout",
					"host": [
						"{{Base URL}}logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can not login to the system with old password",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f174db8-4ef3-4eba-bdad-497ee94a91fc",
						"exec": [
							"const passwordCurr = pm.environment.get(\"userPassword\");\r",
							"const passwordOld=pm.environment.get(\"oldUserPassword\");\r",
							"\r",
							"console.log(passwordCurr);\r",
							"console.log(passwordOld);\r",
							"\r",
							"if (passwordCurr==passwordOld){\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"}else{\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"INVALID_USERNAME_OR_PASSWORD\");\r",
							"});\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0d304c4a-019b-45a1-94fb-571aae3a7a77",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\":\"{{oldUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can login to the system with new password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a6b190ad-3949-4e77-8e46-625171cc8710",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "76a203b4-474e-40d9-a014-b00f62fe2d37",
						"exec": [
							"const request3 = JSON.parse(request.data);\r",
							"\r",
							"if (request3.password.length>=6 && request3.password.length<=20){  \r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"} else {\r",
							"    \r",
							"    pm.test(\"Status code is 400\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "594d0849-d248-4326-bec4-ace7df0378dc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\":\"{{newUserPassword}}\"\r\n}  ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as an authorized user I can create a box",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "358c4535-fbe2-4bd2-b5af-7bac88ed53d5",
						"exec": [
							"const boxName=pm.variables.replaceIn(\"{{$randomWord}}\");\r",
							"pm.environment.set(\"boxName\",boxName)\r",
							"\r",
							"const boxKey=pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
							"pm.environment.set(\"boxKey\",boxKey)\r",
							"\r",
							"const picture=[\r",
							"    \"tree\",\r",
							"    \"gift\",\r",
							"    \"cup_one\",\r",
							"    \"cup_two\",\r",
							"    \"cake\",\r",
							"    \"cup_cake\",\r",
							"    \"cookie_tree\",\r",
							"    \"cookie_star\",\r",
							"    \"lollipop\",\r",
							"    \"mittens\",\r",
							"    \"tree_toys\",\r",
							"    \"santa\",\r",
							"    \"house_one\"\r",
							"]\r",
							"const randomNumber=Math.floor(Math.random()*picture.length);\r",
							"pm.environment.set(\"picture\",picture[randomNumber]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b540f0bf-a389-451e-87de-256435e87b29",
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"const boxname=pm.environment.get(\"boxName\");\r",
							"\r",
							"pm.test(\"Check name of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.name).to.eql(boxname);\r",
							"});\r",
							"\r",
							"const boxkey=pm.environment.get(\"boxKey\");\r",
							"\r",
							"pm.test(\"Check key of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.key).to.eql(boxkey);\r",
							"});\r",
							"\r",
							"const pictures=pm.environment.get(\"picture\");\r",
							"\r",
							"pm.test(\"Check picture of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.picture).to.eql(pictures);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "05323301-3166-49bd-b2e1-85d53a619c35",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{boxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{picture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,  \r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test check the user box",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "67b7df94-3bfb-4e35-b576-344ab9ab2a7d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check admin\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].admin.email).to.eql(\"test-email2023@mail.ru\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "15367b89-abec-40c2-a4e5-f124ee4485a1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}account/boxes",
					"host": [
						"{{Base URL}}account"
					],
					"path": [
						"boxes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as an authorized user I can not create a box with key that already exist",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bf079f13-f6bf-4f19-8706-8edcb3976a5d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4e3ff81b-07b3-477b-b013-4cb1d2ab20fd",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"BOX_KEY_ALREADY_EXIST\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "17e4649e-ff5a-4f5b-8c65-208a1f8a7417",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{$randomWord}}\",\r\n\"key\":\"santa\",\r\n\"picture\":\"{{picture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,\r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can change the name of the box",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "99bc474a-4164-4dc5-af31-05e4508c6dc6",
						"exec": [
							"const newBoxName=pm.variables.replaceIn(\"{{$randomWord}}\");\r",
							"pm.environment.set(\"newBoxName\",newBoxName)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d1a41e4d-dbcc-4e27-ac9a-607c401208cd",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const newname = pm.environment.get(\"newBoxName\");\r",
							"\r",
							"pm.test(\"Check new name of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.name).to.eql(newname);\r",
							"});\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3fefc9b0-fb5b-4e9e-86fd-ba22e7fcb450",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{newBoxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{picture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,  \r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can change the picture of the box wrapper",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f157f90b-0a02-4384-8fe8-ef19dbedb05d",
						"exec": [
							"const picture=[\r",
							"    \"tree\",\r",
							"    \"gift\",\r",
							"    \"cup_one\",\r",
							"    \"cup_two\",\r",
							"    \"cake\",\r",
							"    \"cup_cake\",\r",
							"    \"cookie_tree\",\r",
							"    \"cookie_star\",\r",
							"    \"lollipop\",\r",
							"    \"mittens\",\r",
							"    \"tree_toys\",\r",
							"    \"santa\",\r",
							"    \"house_one\"\r",
							"]\r",
							"const randomNumber=Math.floor(Math.random()*picture.length);\r",
							"pm.environment.set(\"newPicture\",picture[randomNumber]);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fa773809-1b1b-4136-a1bd-d8b15e7f0a01",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const newpicture = pm.environment.get(\"newPicture\");\r",
							"\r",
							"pm.test(\"Check new picture of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.picture).to.eql(newpicture);\r",
							"});\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "9d0358cd-3e9b-41c2-8774-50fd1cd5938d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{newBoxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{newPicture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,  \r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can limit the price of presents",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c2f8d878-3fd4-4b66-8bf1-ee88f16ade8f",
						"exec": [
							"const currency=[\r",
							"    \"rub\",\r",
							"    \"eur\",\r",
							"    \"uah\",\r",
							"    \"byn\",\r",
							"    \"kzt\",\r",
							"    \"usd\"\r",
							"]\r",
							"const randomNumber=Math.floor(Math.random()*currency.length);\r",
							"pm.environment.set(\"currency\",currency[randomNumber]);\r",
							"\r",
							"pm.environment.set(\"cashLimit\",Math.trunc(Math.random()*100000)+1);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1496c188-20eb-4d6b-bc9e-b1cdf8bfed78",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const cashlimit = pm.environment.get(\"cashLimit\");\r",
							"\r",
							"pm.test(\"Check cash limit\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.cashLimit).to.eql(cashlimit);\r",
							"});\r",
							"\r",
							"const cashCurrency = pm.environment.get(\"currency\");\r",
							"\r",
							"pm.test(\"Check cash currency\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.cashLimitCurrency).to.eql(cashCurrency);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "6cf24461-900c-4a24-9491-96c747ef1cc1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{newBoxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{newPicture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":true,  \r\n\"cashLimit\":{{cashLimit}},\r\n\"cashLimitCurrency\":\"{{currency}}\",\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can delete the box",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "959e5678-b585-4d67-96a6-3e4b9db95e84",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3b787d41-2e58-4830-82e0-c16904e459aa",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box/{{boxKey}}",
					"host": [
						"{{Base URL}}box"
					],
					"path": [
						"{{boxKey}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test check the user boxes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0837c29d-35ef-4677-98cd-8604abd2f32d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"[]\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8f35ad57-d823-4201-8a23-0d13dcc131ea",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}account/boxes",
					"host": [
						"{{Base URL}}account"
					],
					"path": [
						"boxes"
					]
				}
			},
			"response": []
		}
	]
}