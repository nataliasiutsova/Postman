{
	"info": {
		"_postman_id": "36a7d50b-3488-42cc-a9ba-9931116e671a",
		"name": "Secret Santa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "18748566-36a7d50b-3488-42cc-a9ba-9931116e671a"
	},
	"item": [
		{
			"name": "Test as a user I can not login to the system with invalid password",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "467318a6-bf09-4f67-aad6-6efb018cc1e2",
						"exec": [
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "927cf2f5-83f2-4944-a2f5-d99be1cdb982",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can not login to the system with invalid email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7ebf5c77-f949-4f07-b302-adb1258556cf",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"USER_NOT_FOUND\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ab136a24-df27-472c-ba28-82e4430134f4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3d1c267c-ba94-480c-bd73-1bd3d5029902",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"test-email@mail.ru\", \r\n    \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can successfully login to the system",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d4a89bf3-a58b-4b68-b31b-b0f3cbe3a183",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2f5c30b6-1845-44ba-9f45-425aac1e55a9",
						"exec": [
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check user name and email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"Tester\");\r",
							"    pm.expect(jsonData.email).to.eql(\"test-email2023@mail.ru\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "cf47006d-b13c-412b-9981-02d9b958a460",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\":\"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can change my password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c3107334-87c0-4ea5-b9b1-3050fc171236",
						"exec": [
							"const oldUserPassword=pm.variables.replaceIn(\"{{userPassword}}\");\r",
							"pm.environment.set(\"oldUserPassword\",oldUserPassword)\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "72b7fe1b-80e8-4ce4-b153-2230c9e061ca",
						"exec": [
							"\r",
							"const request1 = JSON.parse(request.data);\r",
							"\r",
							"\r",
							"if (request1.password.length>=6 && request1.password.length<=20 ){\r",
							"    pm.environment.set(\"userPassword\",request1.password)\r",
							"   \r",
							"};\r",
							"\r",
							"if (request1.password.length>=6 && request1.password.length<=20){  \r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"\r",
							"    });\r",
							"\r",
							"    pm.test(\"Check user's data\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.email).to.eql(\"test-email2023@mail.ru\");\r",
							"        pm.expect(jsonData.isVerified).to.eql(true) });\r",
							"\r",
							"} else {\r",
							"    \r",
							"    pm.test(\"Status code is 400\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"\r",
							"     pm.test(\"Check error message\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.error.message).to.eql(\"validations.invalid\");\r",
							"    });\r",
							"\r",
							"    \r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "54d35a6c-7310-4a59-b44f-9d85a399619f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{newUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}account/password",
					"host": [
						"{{Base URL}}account"
					],
					"path": [
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can successfully logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4814285c-9783-4f83-b3f4-830e8adc81f8",
						"exec": [
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a923248c-c7df-40d4-8930-d65d4002b2a0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}logout",
					"host": [
						"{{Base URL}}logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can not login to the system with old password",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e4221b0-cb67-4e7c-87db-c85272bbf0a6",
						"exec": [
							"const passwordCurr = pm.environment.get(\"userPassword\");\r",
							"const passwordOld=pm.environment.get(\"oldUserPassword\");\r",
							"\r",
							"console.log(passwordCurr);\r",
							"console.log(passwordOld);\r",
							"\r",
							"if (passwordCurr==passwordOld){\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"}else{\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"INVALID_USERNAME_OR_PASSWORD\");\r",
							"});\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "04003932-7c21-44ce-81ad-01ea48ffff01",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\":\"{{oldUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can login to the system with new password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c80d3003-9199-42da-9c30-f1fda727d424",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1f15c4cd-8e35-4143-b13c-9803689a9ff5",
						"exec": [
							"const request3 = JSON.parse(request.data);\r",
							"\r",
							"if (request3.password.length>=6 && request3.password.length<=20){  \r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"} else {\r",
							"    \r",
							"    pm.test(\"Status code is 400\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "eeacda6c-6268-4260-9eb4-9fc0e27e4b11",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\":\"{{newUserPassword}}\"\r\n}  ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}login?redirect=%2F",
					"host": [
						"{{Base URL}}login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as an authorized user I can create a box",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "08a0e847-0b56-4256-a2f9-c8e5aa4f1586",
						"exec": [
							"const boxName=pm.variables.replaceIn(\"{{$randomWord}}\");\r",
							"pm.environment.set(\"boxName\",boxName)\r",
							"\r",
							"const boxKey=pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
							"pm.environment.set(\"boxKey\",boxKey)\r",
							"\r",
							"const picture=[\r",
							"    \"tree\",\r",
							"    \"gift\",\r",
							"    \"cup_one\",\r",
							"    \"cup_two\",\r",
							"    \"cake\",\r",
							"    \"cup_cake\",\r",
							"    \"cookie_tree\",\r",
							"    \"cookie_star\",\r",
							"    \"lollipop\",\r",
							"    \"mittens\",\r",
							"    \"tree_toys\",\r",
							"    \"santa\",\r",
							"    \"house_one\"\r",
							"]\r",
							"const randomNumber=Math.floor(Math.random()*picture.length);\r",
							"pm.environment.set(\"picture\",picture[randomNumber]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b60053b7-c10e-4697-85e0-7a1c8e2bbf7a",
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"const boxname=pm.environment.get(\"boxName\");\r",
							"\r",
							"pm.test(\"Check name of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.name).to.eql(boxname);\r",
							"});\r",
							"\r",
							"const boxkey=pm.environment.get(\"boxKey\");\r",
							"\r",
							"pm.test(\"Check key of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.key).to.eql(boxkey);\r",
							"});\r",
							"\r",
							"const pictures=pm.environment.get(\"picture\");\r",
							"\r",
							"pm.test(\"Check picture of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.picture).to.eql(pictures);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c6a87a2d-79ae-4e70-ad55-2489ce12218d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{boxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{picture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,  \r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test check the user box",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b563446e-8d16-4668-adf1-f97fac1f2f37",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check admin\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].admin.email).to.eql(\"test-email2023@mail.ru\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f3c1a612-c9d1-4249-8015-f4f132e6e33d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}account/boxes",
					"host": [
						"{{Base URL}}account"
					],
					"path": [
						"boxes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as an authorized user I can not create a box with key that already exist",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "53a03dce-004c-4823-a4ee-47d3d0c0bf1e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "db0c4656-19e4-471a-bff5-98d90814534d",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"BOX_KEY_ALREADY_EXIST\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "29e55f6b-c803-4626-92c6-c6ec79d0eb25",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{$randomWord}}\",\r\n\"key\":\"santa\",\r\n\"picture\":\"{{picture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,\r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can change the name of the box",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9263048-7736-4839-b039-199ceac1ffb4",
						"exec": [
							"const newBoxName=pm.variables.replaceIn(\"{{$randomWord}}\");\r",
							"pm.environment.set(\"newBoxName\",newBoxName)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ba89471d-fc98-4146-9a0a-4b1e31e482ce",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const newname = pm.environment.get(\"newBoxName\");\r",
							"\r",
							"pm.test(\"Check new name of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.name).to.eql(newname);\r",
							"});\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "248e6a75-faa7-46f7-85cb-61f65cb094b2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{newBoxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{picture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,  \r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can change the picture of the box wrapper",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b80eb5ba-3a2b-4305-8df9-bb6f54bff582",
						"exec": [
							"const picture=[\r",
							"    \"tree\",\r",
							"    \"gift\",\r",
							"    \"cup_one\",\r",
							"    \"cup_two\",\r",
							"    \"cake\",\r",
							"    \"cup_cake\",\r",
							"    \"cookie_tree\",\r",
							"    \"cookie_star\",\r",
							"    \"lollipop\",\r",
							"    \"mittens\",\r",
							"    \"tree_toys\",\r",
							"    \"santa\",\r",
							"    \"house_one\"\r",
							"]\r",
							"const randomNumber=Math.floor(Math.random()*picture.length);\r",
							"pm.environment.set(\"newPicture\",picture[randomNumber]);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6a080258-5036-4422-be35-fa38d88c9e12",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const newpicture = pm.environment.get(\"newPicture\");\r",
							"\r",
							"pm.test(\"Check new picture of the box\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.picture).to.eql(newpicture);\r",
							"});\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f8db2b0a-56fb-4df6-bc27-5e8b3c242600",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{newBoxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{newPicture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":null,  \r\n\"cashLimit\":null,\r\n\"cashLimitCurrency\":null,\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can limit the price of presents",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0fd0acfc-c30a-4333-b687-c5c019988419",
						"exec": [
							"const currency=[\r",
							"    \"rub\",\r",
							"    \"eur\",\r",
							"    \"uah\",\r",
							"    \"byn\",\r",
							"    \"kzt\",\r",
							"    \"usd\"\r",
							"]\r",
							"const randomNumber=Math.floor(Math.random()*currency.length);\r",
							"pm.environment.set(\"currency\",currency[randomNumber]);\r",
							"\r",
							"pm.environment.set(\"cashLimit\",Math.trunc(Math.random()*100000)+1);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d12c835f-2ad8-470e-acf5-e1a16bb1dc5c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const cashlimit = pm.environment.get(\"cashLimit\");\r",
							"\r",
							"pm.test(\"Check cash limit\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.cashLimit).to.eql(cashlimit);\r",
							"});\r",
							"\r",
							"const cashCurrency = pm.environment.get(\"currency\");\r",
							"\r",
							"pm.test(\"Check cash currency\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.box.cashLimitCurrency).to.eql(cashCurrency);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ad01605b-9973-44f4-8bc9-87e06016717a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":null,\r\n\"name\":\"{{newBoxName}}\",\r\n\"key\":\"{{boxKey}}\",\r\n\"picture\":\"{{newPicture}}\",\r\n\"usePost\":\"{{$randomBoolean}}\",\r\n\"useCashLimit\":true,  \r\n\"cashLimit\":{{cashLimit}},\r\n\"cashLimitCurrency\":\"{{currency}}\",\r\n\"useWish\":\"{{$randomBoolean}}\",\r\n\"useCircleDraw\":null,\r\n\"isInviteAfterDraw\":null,\r\n\"isArchived\":null,\r\n\"createAdminCard\":null,\r\n\"isCreated\":true,\r\n\"useNames\":\"{{$randomBoolean}}\",\r\n\"isPhoneRequired\":\"{{$randomBoolean}}\",\r\n\"logo\":null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box",
					"host": [
						"{{Base URL}}box"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test as a user I can delete the box",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "223eca55-5dca-4271-9ac4-e1c2fd41673e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "6d37345f-f6e3-4c44-8575-fe88386beccd",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}box/{{boxKey}}",
					"host": [
						"{{Base URL}}box"
					],
					"path": [
						"{{boxKey}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test check the user boxes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9a74292d-49d6-4555-ba0e-30aba2ba9286",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"[]\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "47fe1030-d7c7-41f0-a87e-2f87d6399c25",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base URL}}account/boxes",
					"host": [
						"{{Base URL}}account"
					],
					"path": [
						"boxes"
					]
				}
			},
			"response": []
		}
	]
}